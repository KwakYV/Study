2. Определить сложность следующих алгоритмов:
-. Поиск элемента массива с известным индексом  - O(1): Если известен индекс элемента, то поиск займет константое время
-. Дублирование одномерного массива через foreach - O(n): За один прогон по массиву можно сразу заполнить увеличенный массив основным значением и дублирующим - [1,,,1,,]
-. Удаление элемента массива с известным индексом без сдвига - O(1): Так как сдвиг не нужен, то удаление элемента из массива можно прировнять чтению элемента по известному индексу
-. Удаление элемента массива с неизвестным индексом без сдвига - O(n): В худшем случае придется перебрать весь массив элемент и найти нужный, а затем удалить
-. Удаление элемента массива с неизвестным индексом со сдвигом - O(n^2): По мимо поиска элемента и его дуаления, нужно будет сдвинуть все предыдущие элементы на одну позицию вперед. В худшем случае придется сдвинуть n-1 элементов. n*(n-1) = n^2-n => n^2
.

3. Определить сложность следующих алгоритмов. Сколько произойдет итераций?
a)

        int n = 10000;
        List<Integer> arrayList = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 1; j < n; j *= 2) {
                arrayList.add(i * j);
            }
        }
        Внешний цикл - O(n); Количество итераций = 10 000;
        Внутренний - O(logn); Количество итераций = 16
        Результирующая = O(n*logn) - Квазилинейная

b)

        int n = 10000;
        List<Integer> arrayList = new ArrayList<>();
        for (int i = 0; i < n; i += 2) {
            for (int j = i; j < n; j++) {
                arrayList.add(i * j);
            }
        }
        Внешний цикл - O(n); Количество итераций = 5000;
        Внутренний - O(n); Количество итераций = 10 000;
        Результирующая = O(n*n) = O(n^2) - Квадратичная

с)

        int n = 10000;
        List<Integer> arrayList = new ArrayList<>();
        for (int i = 0; i < n; i ++) {
            for (int j = 0; j < n; j++) {
                arrayList.add(i * j);
                n--;
            }
        }
        Ркзультурующая сложность O(n) - Так внутренний цикл при каждой итерации внутреннего цикла уменьшает общее
        количество операций данного алгоритма, которое при суммировании ьудет стремится к n.

d)
    factorial(BigInteger.valueOf(10000))

public static BigInteger factorial(BigInteger n) {
    if (n.equals(BigInteger.ONE)) {
        return n;
    }
    return n.multiply(factorial(n.subtract(BigInteger.valueOf(1))));
}
O(n) - так как алгоритм рекурсивно выполняется ровно n раз.

e)
fib(BigInteger.valueOf(50));

public static BigInteger fib(BigInteger n) {
    if (n.equals(BigInteger.ONE)) {
        return BigInteger.ZERO;
    }
    if (n.equals(BigInteger.TWO)) {
        return BigInteger.ONE;
    }
    return fib(n.subtract(BigInteger.ONE)).add(fib(n.subtract(BigInteger.TWO)));
}
O(2^n) - Полиномиальная сложность, так как при каждом спуске от головной вершины, каждая последующая ведет к удвоению вершин на следующем уровне
В нашем примере Алгоритм должен будет выполнить 2^50 операций, есть вероятность не дождаться результата выполнения программы.